// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVETRAIN_H
#define DRIVETRAIN_H
#include "Commands/Subsystem.h"
#include "Utilities/MotionProfile.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class DriveTrain: public frc::Subsystem {
public:
	DriveTrain();
	double GetSpeed();
	int GetPosition();
	void InitDefaultCommand() override;
	void Periodic() override;
	void ArcadeDrive(double moveValue, double rotateValue, bool squaredInputsf);
	void SetSafetyEnabled(bool enabled);
	void InitializeMotionProfile(const ProfileGenerator& left, const ProfileGenerator& right);
	void TerminateMotionProfile();
	bool IsMotionProfileFinished() const;

	constexpr static double wheelCircumference = 4 * 0.0254 * M_PI; // Meters
	constexpr static double lowGgearRatio = 15.0 / 1.0;
	constexpr static double lowGgearEncoderRatio = lowGgearRatio * (12.0 / 30.0);
	constexpr static double sensorUnitsPerRev = 256 * 4; // The TalonSRX counts 4 edges per encoder count, the quadrature encoder has 256 counts per revolution
	constexpr static double nativeUnitsPerMeterLowGear = 1 / wheelCircumference * lowGgearEncoderRatio * sensorUnitsPerRev; // Approx. 19249

	constexpr static double maxRPS = 5330 / 60; // Max speed of the CIM
	constexpr static double maxEfficency = 0.8;
	constexpr static double maxVelocityLowGear = maxRPS / lowGgearRatio * wheelCircumference * maxEfficency; // Approx. 1.512 Meters per second
	constexpr static double maxNativeUnitsPer100ms = maxVelocityLowGear * nativeUnitsPerMeterLowGear / 10;
	constexpr static double feedForwardGain = 1023 / maxNativeUnitsPer100ms;

private:
	void ConfigureTalon(WPI_TalonSRX& talon);

	constexpr static int slotIdx = 0;
	constexpr static int pidIdx = 0;
	constexpr static int timeoutMs = 10;

	const std::shared_ptr<WPI_TalonSRX> m_talonSRX1;
	const std::shared_ptr<WPI_TalonSRX> m_talonSRX2;
	const std::shared_ptr<frc::RobotDrive> m_robotDrive;
	MotionProfile m_leftProfile;
	MotionProfile m_rightProfile;
	Command* m_driveWithJoystick = nullptr;
};

#endif

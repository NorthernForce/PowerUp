// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "ctre/Phoenix.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainTalonSRX1;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainTalonSRX3;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainTalonSRX5;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::driveTrainSpeedControllerGroupLeft;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainTalonSRX2;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainTalonSRX4;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainTalonSRX6;
std::shared_ptr<frc::SpeedControllerGroup> RobotMap::driveTrainSpeedControllerGroupRight;
std::shared_ptr<frc::RobotDrive> RobotMap::driveTrainRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    driveTrainTalonSRX1.reset(new WPI_TalonSRX(1));
    
    
    driveTrainTalonSRX3.reset(new WPI_TalonSRX(3));
    
    
    driveTrainTalonSRX5.reset(new WPI_TalonSRX(5));
    driveTrainTalonSRX5->SetInverted(true);
    
    
    driveTrainSpeedControllerGroupLeft = std::make_shared<frc::SpeedControllerGroup>(*driveTrainTalonSRX1, *driveTrainTalonSRX3 , *driveTrainTalonSRX5 );
    lw->AddActuator("DriveTrain", "Speed Controller Group Left", driveTrainSpeedControllerGroupLeft);
    
    driveTrainTalonSRX2.reset(new WPI_TalonSRX(2));
    
    
    driveTrainTalonSRX4.reset(new WPI_TalonSRX(4));
    
    
    driveTrainTalonSRX6.reset(new WPI_TalonSRX(6));
    driveTrainTalonSRX6->SetInverted(true);
    
    
    driveTrainSpeedControllerGroupRight = std::make_shared<frc::SpeedControllerGroup>(*driveTrainTalonSRX2, *driveTrainTalonSRX4 , *driveTrainTalonSRX6 );
    lw->AddActuator("DriveTrain", "Speed Controller Group Right", driveTrainSpeedControllerGroupRight);
    
    driveTrainRobotDrive.reset(new frc::RobotDrive(driveTrainSpeedControllerGroupLeft, driveTrainSpeedControllerGroupRight));
    
    driveTrainRobotDrive->SetSafetyEnabled(true);
        driveTrainRobotDrive->SetExpiration(0.1);
        driveTrainRobotDrive->SetSensitivity(0.5);
        driveTrainRobotDrive->SetMaxOutput(1.0);




    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "ctre/Phoenix.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainTalonSRX1;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainTalonSRX3;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainTalonSRX5;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainTalonSRX2;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainTalonSRX4;
std::shared_ptr<WPI_TalonSRX> RobotMap::driveTrainTalonSRX6;
std::shared_ptr<frc::RobotDrive> RobotMap::driveTrainRobotDrive;
std::shared_ptr<frc::DoubleSolenoid> RobotMap::grippergripper;
std::shared_ptr<WPI_TalonSRX> RobotMap::gripperIntakeTalonSRX10;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

std::shared_ptr<WPI_TalonSRX> RobotMap::elevatorTalonSRX7;
std::shared_ptr<WPI_TalonSRX> RobotMap::elevatorTalonSRX9;
std::shared_ptr<WPI_TalonSRX> RobotMap::armTalonSRX8;
std::shared_ptr<AHRS> RobotMap::ahrs;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    frc::LiveWindow *lw = frc::LiveWindow::GetInstance();

    driveTrainTalonSRX1.reset(new WPI_TalonSRX(1));

    driveTrainTalonSRX3.reset(new WPI_TalonSRX(3));

    driveTrainTalonSRX5.reset(new WPI_TalonSRX(5));
    
    driveTrainTalonSRX2.reset(new WPI_TalonSRX(2));

    driveTrainTalonSRX4.reset(new WPI_TalonSRX(4));

    driveTrainTalonSRX6.reset(new WPI_TalonSRX(6));
    
    driveTrainRobotDrive.reset(new frc::RobotDrive(driveTrainTalonSRX1, driveTrainTalonSRX2));
    
    driveTrainRobotDrive->SetSafetyEnabled(true);
        driveTrainRobotDrive->SetExpiration(0.1);
        driveTrainRobotDrive->SetSensitivity(0.5);
        driveTrainRobotDrive->SetMaxOutput(1.0);

        driveTrainRobotDrive->SetInvertedMotor(frc::RobotDrive::kRearRightMotor, true);
//    grippergripper.reset(new frc::DoubleSolenoid(0, 0, 1));
//    lw->AddActuator("Gripper", "gripper", grippergripper);
    
    gripperIntakeTalonSRX10.reset(new WPI_TalonSRX(10));
    
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    //driveTrainTalonSRX1->Config_kP(1, 0.2, 1);
    driveTrainTalonSRX1->ConfigOpenloopRamp(0.5, 10);
    driveTrainTalonSRX3->Follow(*driveTrainTalonSRX1);
    driveTrainTalonSRX5->Follow(*driveTrainTalonSRX1);
    driveTrainTalonSRX5->SetInverted(true);

    //driveTrainTalonSRX2->Config_kP(2, 0.2, 1);
    driveTrainTalonSRX2->ConfigOpenloopRamp(0.5, 10);
    driveTrainTalonSRX4->Follow(*driveTrainTalonSRX2);
    driveTrainTalonSRX6->Follow(*driveTrainTalonSRX2);
    driveTrainTalonSRX6->SetInverted(true);

    elevatorTalonSRX7 = std::make_unique<WPI_TalonSRX>(7);
    elevatorTalonSRX9 = std::make_unique<WPI_TalonSRX>(9);
    armTalonSRX8 = std::make_unique<WPI_TalonSRX>(8);

    ahrs = std::make_unique<AHRS>(frc::SPI::Port::kMXP);
}
